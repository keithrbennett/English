#!/usr/bin/env ruby

# This script generates a markdown file containing all the English aliases in English.rb, in the form:
# | Alias                    | Built-In |
# | ------------------------ | :------: |
# | $ARGV                    |    $*    |
# | $CHILD_STATUS            |    $?    |
# ...

# Some of the formatting done here is not necessary, but is done to make the generated markdown more readable.

require 'stringio'

class AliasMarkdownTableGenerator
  class << self
    ALIAS_SOURCE_FILESPEC = File.absolute_path(File.join(File.basename(__FILE__), '../lib/English.rb'))

  # Get the lines from the file that contain aliases in the form
    def get_alias_lines_from_file
      File.readlines(ALIAS_SOURCE_FILESPEC).select { |line| line.match(/^alias/) }
    end

    # Returns a 2-element array containing the alias and the variable name.
    def get_alias_tuple_from_line(line)
      line.split[1..2]
    end

    # Get aliases as an array of arrays sorted by alias, each containing the alias and the variable name,
    # e.g. [ ['$ARGV', '$*'], ... ]
    def get_aliases
      get_alias_lines_from_file.map { |line| get_alias_tuple_from_line(line) }.sort
    end

    # Returns a string containing a markdown table of the aliases, with headings "Alias" and "Built-In".
    def generate
      aliases = get_aliases

      col1_label = 'Alias'
      col2_label = 'Built-In'

      col1_length = aliases.map { |a| a[0].length }.max
      col2_length = [aliases.map { |a| a[1].length }.max, col2_label.length].max

      col1_heading_line = '-' * col1_length
      col2_heading_line = ":#{'-' * (col2_length - 2)}:"

      format_line = ->(item1, item2) do
        "| #{item1.ljust(col1_length)} | #{item2.center(col2_length)} |"
      end

      markdown_string = StringIO.new
      markdown_string << format_line.call(col1_label, col2_label) << "\n"
      markdown_string << format_line.call(col1_heading_line, col2_heading_line) << "\n"
      aliases.each do |(alias_, variable_)|
        markdown_string << format_line.call(alias_, variable_) << "\n"
      end
      markdown_string.string
    end
  end
end

if __FILE__ == $0
  puts AliasMarkdownTableGenerator.generate
end

=begin
Table generated by this script on 2023-07-28:

| Alias                    | Built-In |
| ------------------------ | :------: |
| $ARGV                    |    $*    |
| $CHILD_STATUS            |    $?    |
| $DEFAULT_INPUT           |    $<    |
| $DEFAULT_OUTPUT          |    $>    |
| $ERROR_INFO              |    $!    |
| $ERROR_POSITION          |    $@    |
| $FIELD_SEPARATOR         |    $;    |
| $FS                      |    $;    |
| $IGNORECASE              |    $=    |
| $INPUT_LINE_NUMBER       |    $.    |
| $INPUT_RECORD_SEPARATOR  |    $/    |
| $LAST_MATCH_INFO         |    $~    |
| $LAST_PAREN_MATCH        |    $+    |
| $LAST_READ_LINE          |    $_    |
| $MATCH                   |    $&    |
| $NR                      |    $.    |
| $OFS                     |    $,    |
| $ORS                     |    $\    |
| $OUTPUT_FIELD_SEPARATOR  |    $,    |
| $OUTPUT_RECORD_SEPARATOR |    $\    |
| $PID                     |    $$    |
| $POSTMATCH               |    $'    |
| $PREMATCH                |    $`    |
| $PROCESS_ID              |    $$    |
| $RS                      |    $/    |
=end
